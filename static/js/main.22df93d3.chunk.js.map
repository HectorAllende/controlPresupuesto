{"version":3,"sources":["components/Error.js","components/Pregunta.js","components/Formulario.js","components/Vista.js","components/Listado.js","Helpers.js","components/ControlPresupuesto.js","App.js","serviceWorker.js","index.js"],"names":["Error","mensaje","className","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","useState","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Formulario","guardarGasto","guardarCrearGasto","nombre","guardarNombre","trim","gasto","id","shortid","generate","Vista","Listado","gastos","map","key","revisarPresupuesto","presupuesto","restante","ControlPresupuesto","App","mostarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.22df93d3.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n    <p className=\"alert alert-danger error\">{mensaje}</p>\r\n\r\n     );\r\n}\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired,\r\n}\r\n \r\nexport default Error;\r\n\r\n","import React, { Fragment, useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Error from './Error'\r\n       \r\nconst Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\r\n\r\n    const [cantidad, guardarCantidad]= useState(0)\r\n    const [error, guardarError] = useState(false)\r\n\r\n    const definirPresupuesto = e =>{\r\n        guardarCantidad(parseInt(e.target.value, 10))\r\n    }\r\n\r\n    const agregarPresupuesto= e=>{\r\n        e.preventDefault()\r\n\r\n        // validar \r\n\r\n        if(cantidad<1 || isNaN(cantidad)){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n\r\n        guardarError(false)\r\n\r\n        // Si pasa la validacion\r\n\r\n        guardarPresupuesto(cantidad)\r\n        guardarRestante(cantidad)\r\n        actualizarPregunta(false)\r\n\r\n    }\r\n    return ( \r\n\r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n\r\n            {error ? <Error mensaje = \"El Presupuesto es incorrecto\"/>  : null}\r\n\r\n            <form\r\n                onSubmit={agregarPresupuesto}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder= \"Coloca aquÃ­ tus morlacos\" \r\n                    onChange= {definirPresupuesto}               \r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value= \"Definir presupuesto\"\r\n                \r\n                />\r\n\r\n\r\n            </form>\r\n\r\n\r\n        </Fragment>\r\n\r\n     );\r\n}\r\n\r\nPregunta.propTypes = {\r\n    guardarPresupuesto: PropTypes.func.isRequired,\r\n    guardarRestante: PropTypes.func.isRequired,\r\n    actualizarPregunta: PropTypes.func.isRequired,\r\n}\r\n \r\nexport default Pregunta;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport Error from './Error'\r\nimport shortid from 'shortid';\r\n\r\nconst Formulario = ({guardarGasto, guardarCrearGasto}) => {\r\n\r\n    const [nombre, guardarNombre]= useState('')\r\n    const [cantidad, guardarCantidad]= useState('')\r\n    const [error, guardarError]= useState(false)\r\n    \r\n\r\n\r\n\r\n    const agregarGasto=e=>{\r\n        e.preventDefault()\r\n\r\n        // validar\r\n\r\n        if(cantidad<1 ||isNaN(cantidad)|| nombre.trim()=== ''){\r\n\r\n            guardarError(true)\r\n            return;\r\n\r\n        }\r\n\r\n        guardarError(false)\r\n\r\n        // construir el gasto\r\n\r\n        const gasto ={\r\n            nombre,\r\n            cantidad,\r\n            id: shortid.generate()\r\n        }\r\n\r\n    \r\n        // pasar al componente princial\r\n        guardarGasto(gasto)\r\n        guardarCrearGasto(true)\r\n\r\n        // resetear el form\r\n        guardarNombre('')\r\n        guardarCantidad('')\r\n\r\n\r\n\r\n    }\r\n\r\n    return ( \r\n       \r\n        <form\r\n            onSubmit={agregarGasto}\r\n        >\r\n\r\n            <h2>Agrega tus gastos aqui</h2>\r\n\r\n            {error ? <Error mensaje= \"Ambos campos son obligatorios o presupuesto incorrecto\" /> :null}\r\n\r\n            <div className=\"campo\">\r\n                <label>Nombre del gasto</label>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. Comida, transporte\"\r\n                    value= {nombre}\r\n                    onChange={e=>guardarNombre(e.target.value)}\r\n                    \r\n                />\r\n                <label>Cantidad del gasto</label>\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Ej. 300\"\r\n                    value= {cantidad}\r\n                    onChange={e=>guardarCantidad(parseInt(e.target.value))}\r\n\r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Agregar Gasto\"\r\n                />\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </form>\r\n        \r\n\r\n     );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarGasto: PropTypes.func.isRequired,\r\n    guardarCrearGasto: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Vista = ({gasto}) => {\r\n    return ( \r\n\r\n        <li className=\"gastos\">\r\n            <p>\r\n\r\n                {gasto.nombre}\r\n\r\n                 <span className=\"gasto\">${gasto.cantidad}</span>\r\n\r\n            </p>\r\n\r\n\r\n            \r\n        </li>\r\n     );\r\n}\r\n\r\nVista.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}\r\n \r\nexport default Vista;","import React from 'react';\r\nimport Vista from './Vista'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Listado = ({gastos}) => {\r\n    return ( \r\n        <div className=\"gastos-realizados\">\r\n            <h2>Listado</h2>\r\n            {gastos.map(gasto=>(\r\n                <Vista\r\n                    key={gasto.id}\r\n                    gasto={gasto}\r\n                />\r\n            ))}\r\n        </div>\r\n\r\n     );\r\n};\r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}\r\n\r\n\r\n \r\nexport default Listado;","export const revisarPresupuesto = (presupuesto, restante)=>{\r\n\r\n    let clase;\r\n\r\n    if((presupuesto/4)>restante){\r\n        clase = 'alert alert-danger';\r\n    } else if((presupuesto/2)>restante){\r\n        clase = 'alert alert-warning';\r\n    }else{\r\n        clase='alert alert-success'\r\n    }\r\n\r\n    return clase;\r\n\r\n}\r\n\r\n\r\n","import React, { Fragment } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {revisarPresupuesto } from '../Helpers'\r\n\r\n\r\nconst ControlPresupuesto = ({presupuesto, restante}) => {\r\n    return ( \r\n        <Fragment>\r\n            <div className='alert alert-primary'>\r\n                Morlacos: ${presupuesto}\r\n\r\n            </div>\r\n\r\n            <div className={revisarPresupuesto(presupuesto,restante)}>\r\n                Morlacos que me quedan: ${restante}\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </Fragment>\r\n\r\n     );\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}\r\n \r\nexport default ControlPresupuesto;","import React, { useState, useEffect } from 'react';\nimport Pregunta from './components/Pregunta';\nimport Formulario from './components/Formulario';\nimport Listado from './components/Listado';\nimport ControlPresupuesto from './components/ControlPresupuesto';\n\n\nfunction App() {\n\n  const [presupuesto, guardarPresupuesto]= useState(0)\n  const [restante, guardarRestante] = useState(0)\n  const [mostarpregunta,actualizarPregunta]= useState(true)\n  const [gastos, guardarGastos]=useState([])\n  const [gasto, guardarGasto] = useState ({})\n  const [creargasto, guardarCrearGasto] = useState(false)\n\n  // UseEffect que actualiza el restante\n\n  useEffect(() => {\n    if(creargasto){\n\n      // agrega el nuevo presupuesto\n      guardarGastos([\n        ...gastos,\n        gasto\n      ])\n      //  resta del presupuesto actual\n\n      const presupuestoRestante = restante - gasto.cantidad;\n      guardarRestante(presupuestoRestante)\n\n      guardarCrearGasto(false)\n    }\n\n  }, [gasto, creargasto, gastos, restante])\n\n\n  return (\n    <div className=\"container\">\n      <header>\n\n        <h1>Gasto Semanal</h1>\n\n        <div className=\"contenido-principal contenido\">\n\n          {mostarpregunta ? (\n\n            <Pregunta\n              guardarPresupuesto={guardarPresupuesto}\n              guardarRestante={guardarRestante}\n              actualizarPregunta={actualizarPregunta}\n            />\n\n          ) : (\n              <div className=\"row\">\n\n                <div className=\"one-half column\">\n                  <Formulario\n                    guardarGasto={guardarGasto}\n                    guardarCrearGasto={guardarCrearGasto}\n                  />\n\n                </div>\n\n                <div className=\"one-half column\">\n                  <Listado\n                   gastos={gastos}\n                  />\n\n                  <ControlPresupuesto\n                    presupuesto={presupuesto}\n                    restante={restante}\n                  />\n                  \n                 </div>\n\n              </div>\n\n          )}\n        \n         \n\n\n        </div>\n\n      </header>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}